{"version":3,"file":"ng2-img-max.mjs","sources":["../../../src/lib/img-exif.service.ts","../../../src/lib/img-max-size.service.ts","../../../src/lib/ng2-pica.service.ts","../../../src/lib/img-maxpx-size.service.ts","../../../src/lib/ng2-img-max.service.ts","../../../src/lib/ng2-img-max.module.ts","../../../src/ng2-img-max.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport * as exifr from 'exifr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImgExifService {\r\n  public getOrientedImage(image: HTMLImageElement): Promise<HTMLImageElement> {\r\n    return new Promise<HTMLImageElement>(resolve => {\r\n      let img: any;\r\n      exifr.orientation(image).catch(err => undefined).then(orientation => {\r\n        if (orientation != 1) {\r\n          let canvas: HTMLCanvasElement = document.createElement(\"canvas\"),\r\n            ctx: CanvasRenderingContext2D = <CanvasRenderingContext2D>canvas.getContext(\"2d\"),\r\n            cw: number = image.width,\r\n            ch: number = image.height,\r\n            cx: number = 0,\r\n            cy: number = 0,\r\n            deg: number = 0;\r\n          switch (orientation) {\r\n            case 3:\r\n            case 4:\r\n              cx = -image.width;\r\n              cy = -image.height;\r\n              deg = 180;\r\n              break;\r\n            case 5:\r\n            case 6:\r\n              cw = image.height;\r\n              ch = image.width;\r\n              cy = -image.height;\r\n              deg = 90;\r\n              break;\r\n            case 7:\r\n            case 8:\r\n              cw = image.height;\r\n              ch = image.width;\r\n              cx = -image.width;\r\n              deg = 270;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n\r\n          canvas.width = cw;\r\n          canvas.height = ch;\r\n          if (orientation && [2, 4, 5, 7].indexOf(orientation) > -1) {\r\n            //flip image\r\n            ctx.translate(cw, 0);\r\n            ctx.scale(-1, 1);\r\n          }\r\n          ctx.rotate(deg * Math.PI / 180);\r\n          ctx.drawImage(image, cx, cy);\r\n          img = document.createElement(\"img\");\r\n          img.width = cw;\r\n          img.height = ch;\r\n          img.addEventListener('load', function () {\r\n            resolve(img);\r\n          });\r\n          img.src = canvas.toDataURL(\"image/png\");\r\n        } else {\r\n          resolve(image);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\nimport {ImgExifService} from './img-exif.service';\r\n\r\n\r\nconst MAX_STEPS = 15;\r\ndeclare var self: any;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImgMaxSizeService {\r\n  timeAtStart: number = 0;\r\n  initialFile: File | undefined;\r\n\r\n  constructor(private imageExifService: ImgExifService) {\r\n  }\r\n\r\n  public compressImage(file: File, maxSizeInMB: number, ignoreAlpha: boolean = false, logExecutionTime: boolean = false): Observable<any> {\r\n    let compressedFileSubject: Subject<any> = new Subject<any>();\r\n    this.timeAtStart = new Date().getTime();\r\n    this.initialFile = file;\r\n    if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\r\n      //END OF COMPRESSION\r\n      setTimeout(() => {\r\n        compressedFileSubject.error({\r\n          compressedFile: file,\r\n          reason: \"File provided is neither of type jpg nor of type png.\",\r\n          error: \"INVALID_EXTENSION\"\r\n        });\r\n      }, 0);\r\n      return compressedFileSubject.asObservable();\r\n    }\r\n\r\n    let oldFileSize = file.size / 1024 / 1024;\r\n    if (oldFileSize < maxSizeInMB) {\r\n      // END OF COMPRESSION\r\n      // FILE SIZE ALREADY BELOW MAX_SIZE -> no compression needed\r\n      setTimeout(() => {\r\n        compressedFileSubject.next(file)\r\n      }, 0);\r\n      return compressedFileSubject.asObservable();\r\n    }\r\n\r\n    let cvs = document.createElement('canvas');\r\n    let ctx = cvs.getContext('2d');\r\n    let img = new Image();\r\n    let self = this;\r\n    img.onload = () => {\r\n      this.imageExifService.getOrientedImage(img).then(orientedImg => {\r\n        window.URL.revokeObjectURL(img.src);\r\n        cvs.width = orientedImg.width;\r\n        cvs.height = orientedImg.height;\r\n        ctx?.drawImage(orientedImg, 0, 0);\r\n        let imageData = ctx?.getImageData(0, 0, orientedImg.width, orientedImg.height);\r\n        if (file.type === \"image/png\" && this.isImgUsingAlpha(imageData) && !ignoreAlpha) {\r\n          //png image with alpha\r\n          compressedFileSubject.error({\r\n            compressedFile: file,\r\n            reason: \"File provided is a png image which uses the alpha channel. No compression possible.\",\r\n            error: \"PNG_WITH_ALPHA\"\r\n          });\r\n        }\r\n        ctx = cvs.getContext('2d', {'alpha': false});\r\n        ctx?.drawImage(orientedImg, 0, 0);\r\n        self.getCompressedFile(cvs, 50, maxSizeInMB, 1).then((compressedFile) => {\r\n          compressedFileSubject.next(compressedFile);\r\n          self.logExecutionTime(logExecutionTime);\r\n        }).catch((error) => {\r\n          compressedFileSubject.error(error);\r\n          self.logExecutionTime(logExecutionTime);\r\n        });\r\n      });\r\n    }\r\n    img.src = window.URL.createObjectURL(file);\r\n    return compressedFileSubject.asObservable();\r\n  };\r\n\r\n  private getCompressedFile(cvs: HTMLCanvasElement, quality: number, maxSizeInMB: number, currentStep: number): Promise<File> {\r\n    let result: Promise<File> = new Promise((resolve, reject) => {\r\n      cvs.toBlob((blob) => {\r\n\r\n        if(!blob){\r\n          return reject({\r\n            compressedFile: null,\r\n            reason: \"Blob error\",\r\n            error: \"BAD_BLOB\"\r\n          });\r\n        }\r\n\r\n        if (currentStep + 1 > MAX_STEPS) {\r\n          //COMPRESSION END\r\n          //maximal steps reached\r\n          reject({\r\n            compressedFile: this.getResultFile(blob),\r\n            reason: \"Could not find the correct compression quality in \" + MAX_STEPS + \" steps.\",\r\n            error: \"MAX_STEPS_EXCEEDED\"\r\n          });\r\n        } else {\r\n          let newQuality = this.getCalculatedQuality(blob, quality, maxSizeInMB, currentStep);\r\n          this.checkCompressionStatus(cvs, blob, quality, maxSizeInMB, currentStep, newQuality)\r\n            .then(result => {\r\n              resolve(result);\r\n            })\r\n            .catch(result => {\r\n              reject(result);\r\n            });\r\n        }\r\n      }, \"image/jpeg\", quality / 100);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private getResultFile(blob: Blob): File | null {\r\n\r\n    if(!this.initialFile){\r\n      return null;\r\n    }\r\n\r\n    return this.generateResultFile(blob, this.initialFile.name, this.initialFile.type, new Date().getTime());\r\n  }\r\n\r\n  private generateResultFile(blob: Blob, name: string, type: string, lastModified: number): File {\r\n    let resultFile = new Blob([blob], {type: type});\r\n    return this.blobToFile(resultFile, name, lastModified);\r\n  }\r\n\r\n  private blobToFile(blob: Blob, name: string, lastModified: number): File {\r\n    let file: any = blob;\r\n    file.name = name;\r\n    file.lastModified = lastModified;\r\n\r\n    //Cast to a File() type\r\n    return <File>file;\r\n  }\r\n\r\n  private getCalculatedQuality(blob: Blob, quality: number, maxSizeInMB: number, currentStep: number): number {\r\n\r\n    if(!this.initialFile){\r\n      return 0;\r\n    }\r\n\r\n    //CALCULATE NEW QUALITY\r\n    let currentSize = blob.size / 1024 / 1024;\r\n    let ratioMaxSizeToCurrentSize = maxSizeInMB / currentSize;\r\n    if (ratioMaxSizeToCurrentSize > 5) {\r\n      //max ratio to avoid extreme quality values\r\n      ratioMaxSizeToCurrentSize = 5;\r\n    }\r\n    let ratioMaxSizeToInitialSize = currentSize / (this.initialFile.size / 1024 / 1024);\r\n    if (ratioMaxSizeToInitialSize < 0.05) {\r\n      //min ratio to avoid extreme quality values\r\n      ratioMaxSizeToInitialSize = 0.05;\r\n    }\r\n    let newQuality = 0;\r\n    let multiplicator = Math.abs(ratioMaxSizeToInitialSize - 1) * 10 / (currentStep * 1.7) / ratioMaxSizeToCurrentSize;\r\n    if (multiplicator < 1) {\r\n      multiplicator = 1;\r\n    }\r\n    if (ratioMaxSizeToCurrentSize >= 1) {\r\n      newQuality = quality + (ratioMaxSizeToCurrentSize - 1) * 10 * multiplicator;\r\n    } else {\r\n      newQuality = quality - (1 - ratioMaxSizeToCurrentSize) * 10 * multiplicator;\r\n    }\r\n\r\n    if (newQuality > 100) {\r\n      //max quality = 100, so let's set the new quality to the value in between the old quality and 100 in case of > 100\r\n      newQuality = quality + (100 - quality) / 2;\r\n    }\r\n\r\n    if (newQuality < 0) {\r\n      //min quality = 0, so let's set the new quality to the value in between the old quality and 0 in case of < 0\r\n      newQuality = quality - quality / 2;\r\n    }\r\n    return newQuality;\r\n  }\r\n\r\n  private checkCompressionStatus(cvs: HTMLCanvasElement, blob: Blob, quality: number, maxSizeInMB: number, currentStep: number, newQuality: number): Promise<any> {\r\n    let result: Promise<any> = new Promise((resolve, reject) => {\r\n      if (quality === 100 && newQuality >= 100) {\r\n        //COMPRESSION END\r\n        //Seems like quality 100 is max but file still too small, case that shouldn't exist as the compression shouldn't even have started in the first place\r\n        reject({\r\n          compressedFile: this.initialFile,\r\n          reason: \"Unfortunately there was an error while compressing the file.\",\r\n          error: \"FILE_BIGGER_THAN_INITIAL_FILE\"\r\n        });\r\n      } else if ((quality < 1) && (newQuality < quality)) {\r\n        //COMPRESSION END\r\n        //File size still too big but can't compress further than quality=0\r\n        reject({\r\n          compressedFile: this.getResultFile(blob),\r\n          reason: \"Could not compress image enough to fit the maximal file size limit.\",\r\n          error: \"UNABLE_TO_COMPRESS_ENOUGH\"\r\n        });\r\n      } else if ((newQuality > quality) && (Math.round(quality) == Math.round(newQuality))) {\r\n        //COMPRESSION END\r\n        //next steps quality would be the same quality but newQuality is slightly bigger than old one, means we most likely found the nearest quality to compress to maximal size\r\n        resolve(this.getResultFile(blob));\r\n      } else if (currentStep > 5 && (newQuality > quality) && (newQuality < quality + 2)) {\r\n        //COMPRESSION END\r\n        //for some rare occasions the algorithm might be stuck around e.g. 98.5 and 97.4 because of the maxQuality of 100, the current quality is the nearest possible quality in that case\r\n        resolve(this.getResultFile(blob));\r\n      } else if ((newQuality > quality) && Number.isInteger(quality) && (Math.floor(newQuality) == quality)) {\r\n        //COMPRESSION END\r\n        /*\r\n            in the previous step if ((quality > newQuality) && (Math.round(quality) == Math.round(newQuality))) applied, so\r\n            newQuality = Math.round(newQuality) - 1; this was done to reduce the quality at least a full integer down to not waste a step\r\n            with the same compression rate quality as before. Now, the newQuality is still only in between the old quality (e.g. 93)\r\n            and the newQuality (e.g. 94) which most likely means that the value for the newQuality (the bigger one) would make the filesize\r\n            too big so we should just stick with the current, lower quality and return that file.\r\n        */\r\n        resolve(this.getResultFile(blob));\r\n      } else {\r\n        //CONTINUE COMPRESSION\r\n        if ((quality > newQuality) && (Math.round(quality) == Math.round(newQuality))) {\r\n          //quality can only be an integer -> make sure difference between old quality and new one is at least a whole integer number\r\n          // - it would be nonsense to compress again with the same quality\r\n          newQuality = Math.round(newQuality) - 1;\r\n        }\r\n        //recursively call function again\r\n        resolve(this.getCompressedFile(cvs, newQuality, maxSizeInMB, currentStep + 1));\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private isImgUsingAlpha(imageData:any): boolean {\r\n    for (var i = 0; i < imageData.data.length; i += 4) {\r\n      if (imageData.data[i + 3] !== 255) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private logExecutionTime(logExecutionTime: boolean): void {\r\n    if (logExecutionTime) {\r\n      console.info(\"Execution time: \", new Date().getTime() - this.timeAtStart + \"ms\");\r\n    }\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {ImgExifService} from './img-exif.service';\r\n// @ts-ignore\r\nimport * as pica from 'pica';\r\n\r\nconst globalWindow: any = window;\r\n\r\nexport interface ResizeCanvasOptions {\r\n  quality?: number;\r\n  alpha?: boolean;\r\n  unsharpAmount?: number;\r\n  unsharpRadius?: number;\r\n  unsharpThreshold?: number;\r\n}\r\n\r\nexport interface ResizeBufferOptions {\r\n  src: Uint8Array;\r\n  width: number;\r\n  height: number;\r\n  toWidth: number;\r\n  toHeight: number;\r\n  quality?: number;\r\n  alpha?: boolean;\r\n  unsharpAmount?: number;\r\n  unsharpRadius?: number;\r\n  unsharpThreshold?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Ng2PicaService {\r\n  constructor(private imageExifService: ImgExifService) {\r\n  }\r\n\r\n  public resize(files: File[], width: number, height: number, keepAspectRatio: boolean = false): Observable<any> {\r\n    let resizedFile: Subject<File> = new Subject<File>();\r\n    for (let i = 0; i < files.length; i++) {\r\n      this.resizeFile(files[i], width, height, keepAspectRatio).then((returnedFile) => {\r\n        resizedFile.next(returnedFile);\r\n      }).catch((error) => {\r\n        resizedFile.error(error);\r\n      });\r\n    }\r\n    return resizedFile.asObservable();\r\n  }\r\n\r\n  public resizeCanvas(from: HTMLCanvasElement, to: HTMLCanvasElement, options: ResizeCanvasOptions): Promise<HTMLCanvasElement> {\r\n    let result: Promise<HTMLCanvasElement> = new Promise((resolve, reject) => {\r\n      let curPica = new pica();\r\n      if (!curPica || !curPica.resize) {\r\n        curPica = new globalWindow.pica();\r\n      }\r\n      curPica.resize(from, to, options)\r\n        .then((response: any) => {\r\n            resolve(response);\r\n          },\r\n          (error: any) => {\r\n            reject(error);\r\n          });\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public resizeBuffer(options: ResizeBufferOptions): Promise<Uint8Array> {\r\n    let result: Promise<Uint8Array> = new Promise((resolve, reject) => {\r\n      let curPica = new pica();\r\n      if (!curPica || !curPica.resizeBuffer) {\r\n        curPica = new globalWindow.pica();\r\n      }\r\n      curPica.resizeBuffer(options)\r\n        .then((response: any) => {\r\n            resolve(response);\r\n          },\r\n          (error: any) => {\r\n            reject(error);\r\n          });\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private resizeFile(file: File, width: number, height: number, keepAspectRatio: boolean = false): Promise<File> {\r\n    let result: Promise<File> = new Promise((resolve, reject) => {\r\n      let fromCanvas: HTMLCanvasElement = document.createElement('canvas');\r\n      let ctx = fromCanvas.getContext('2d');\r\n      let img = new Image();\r\n      img.onload = () => {\r\n        this.imageExifService.getOrientedImage(img).then(orientedImg => {\r\n          globalWindow.URL.revokeObjectURL(img.src);\r\n          fromCanvas.width = orientedImg.width;\r\n          fromCanvas.height = orientedImg.height;\r\n          ctx?.drawImage(orientedImg, 0, 0);\r\n          let imageData = ctx?.getImageData(0, 0, orientedImg.width, orientedImg.height);\r\n          if (keepAspectRatio && imageData) {\r\n            let ratio = Math.min(width / imageData.width, height / imageData.height);\r\n            width = Math.round(imageData.width * ratio);\r\n            height = Math.round(imageData.height * ratio);\r\n          }\r\n          let useAlpha = true;\r\n          if (file.type === \"image/jpeg\" || (file.type === \"image/png\" && !this.isImgUsingAlpha(imageData))) {\r\n            //image without alpha\r\n            useAlpha = false;\r\n            ctx = fromCanvas.getContext('2d', {'alpha': false});\r\n            ctx?.drawImage(orientedImg, 0, 0);\r\n          }\r\n          let toCanvas: HTMLCanvasElement = document.createElement('canvas');\r\n          toCanvas.width = width;\r\n          toCanvas.height = height;\r\n          this.resizeCanvas(fromCanvas, toCanvas, {'alpha': useAlpha})\r\n            .then((resizedCanvas: HTMLCanvasElement) => {\r\n              resizedCanvas.toBlob((blob) => {\r\n                if (!blob) {\r\n                  return reject('error blob')\r\n                }\r\n                let newFile: File = this.generateResultFile(blob, file.name, file.type, new Date().getTime());\r\n                resolve(newFile);\r\n              }, file.type);\r\n            })\r\n            .catch((error) => {\r\n              reject(error);\r\n            });\r\n        });\r\n      }\r\n      img.src = globalWindow.URL.createObjectURL(file);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private isImgUsingAlpha(imageData: any): boolean {\r\n    for (var i = 0; i < imageData.data.length; i += 4) {\r\n      if (imageData.data[i + 3] !== 255) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private generateResultFile(blob: Blob, name: string, type: string, lastModified: number): File {\r\n    let resultFile = new Blob([blob], {type: type});\r\n    return this.blobToFile(resultFile, name, lastModified);\r\n  }\r\n\r\n  private blobToFile(blob: Blob, name: string, lastModified: number): File {\r\n    let file: any = blob;\r\n    file.name = name;\r\n    file.lastModified = lastModified;\r\n\r\n    //Cast to a File() type\r\n    return <File>file;\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\nimport {ImgExifService} from './img-exif.service';\r\nimport {Ng2PicaService} from './ng2-pica.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImgMaxPXSizeService {\r\n  timeAtStart: number = 0;\r\n\r\n  constructor(private ng2PicaService: Ng2PicaService,\r\n              private imageExifService: ImgExifService) {\r\n  }\r\n\r\n  public resizeImage(file: File, maxWidth: number, maxHeight: number, logExecutionTime: boolean = false): Observable<any> {\r\n    let resizedFileSubject: Subject<any> = new Subject<any>();\r\n    this.timeAtStart = new Date().getTime();\r\n    if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\r\n      //END OF RESIZE\r\n      setTimeout(() => {\r\n        resizedFileSubject.error({\r\n          resizedFile: file,\r\n          reason: \"The provided File is neither of type jpg nor of type png.\",\r\n          error: \"INVALID_EXTENSION\"\r\n        });\r\n      }, 0);\r\n      return resizedFileSubject.asObservable();\r\n    }\r\n    let img = new Image();\r\n    let self = this;\r\n    img.onload = () => {\r\n      this.imageExifService.getOrientedImage(img).then(orientedImg => {\r\n        window.URL.revokeObjectURL(img.src);\r\n        let currentWidth = orientedImg.width;\r\n        let currentHeight = orientedImg.height;\r\n        let newWidth = currentWidth;\r\n        let newHeight = currentHeight;\r\n        if (newWidth > maxWidth) {\r\n          newWidth = maxWidth\r\n          //resize height proportionally\r\n          let ratio = maxWidth / currentWidth; //is gonna be <1\r\n          newHeight = newHeight * ratio;\r\n        }\r\n        currentHeight = newHeight;\r\n        if (newHeight > maxHeight) {\r\n          newHeight = maxHeight;\r\n          //resize width proportionally\r\n          let ratio = maxHeight / currentHeight; //is gonna be <1\r\n          newWidth = newWidth * ratio;\r\n        }\r\n        if (newHeight === orientedImg.height && newWidth === orientedImg.width) {\r\n          //no resizing necessary\r\n          resizedFileSubject.next(file);\r\n          self.logExecutionTime(logExecutionTime);\r\n        } else {\r\n          self.ng2PicaService.resize([file], newWidth, newHeight).subscribe((result) => {\r\n            //all good, result is a file\r\n            resizedFileSubject.next(result);\r\n            self.logExecutionTime(logExecutionTime);\r\n          }, error => {\r\n            //something went wrong\r\n            resizedFileSubject.error({resizedFile: file, reason: error, error: \"PICA_ERROR\"});\r\n            self.logExecutionTime(logExecutionTime);\r\n          });\r\n        }\r\n      });\r\n    };\r\n    img.src = window.URL.createObjectURL(file);\r\n\r\n    return resizedFileSubject.asObservable();\r\n  };\r\n\r\n  private logExecutionTime(logExecutionTime: boolean): void {\r\n    if (logExecutionTime) {\r\n      console.info(\"Execution time: \", new Date().getTime() - this.timeAtStart + \"ms\");\r\n    }\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {ImgMaxSizeService} from './img-max-size.service';\r\nimport {ImgMaxPXSizeService} from './img-maxpx-size.service';\r\nimport {ImgExifService} from './img-exif.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Ng2ImgMaxService {\r\n  constructor(private imgMaxSizeService: ImgMaxSizeService,\r\n              private imgMaxPXSizeService: ImgMaxPXSizeService,\r\n              private imageExifService: ImgExifService) {\r\n  }\r\n\r\n  public compress(files: File[], maxSizeInMB: number, ignoreAlpha: boolean = false, logExecutionTime: boolean = false): Observable<any> {\r\n    let compressedFileSubject: Subject<any> = new Subject<any>();\r\n    files.forEach((file) => {\r\n      this.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime).subscribe((value) => {\r\n        compressedFileSubject.next(value);\r\n      }, error => {\r\n        compressedFileSubject.error(error);\r\n      });\r\n    });\r\n    return compressedFileSubject.asObservable();\r\n  }\r\n\r\n  public resize(files: File[], maxWidth: number, maxHeight: number, logExecutionTime: boolean = false): Observable<any> {\r\n    let resizedFileSubject: Subject<any> = new Subject<any>();\r\n    files.forEach((file) => {\r\n      this.resizeImage(file, maxWidth, maxHeight, logExecutionTime).subscribe((value) => {\r\n        resizedFileSubject.next(value);\r\n      }, error => {\r\n        resizedFileSubject.error(error);\r\n      });\r\n    });\r\n    return resizedFileSubject.asObservable();\r\n  }\r\n\r\n  public compressImage(file: File, maxSizeInMB: number, ignoreAlpha: boolean = false, logExecutionTime: boolean = false): Observable<any> {\r\n    return this.imgMaxSizeService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);\r\n  }\r\n\r\n  public resizeImage(file: File, maxWidth: number, maxHeight: number, logExecutionTime: boolean = false): Observable<any> {\r\n    return this.imgMaxPXSizeService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);\r\n  }\r\n\r\n  public getEXIFOrientedImage(image: HTMLImageElement): Promise<HTMLImageElement> {\r\n    return this.imageExifService.getOrientedImage(image);\r\n  }\r\n}\r\n","import {NgModule} from \"@angular/core\";\r\nimport {Ng2ImgMaxService} from \"./ng2-img-max.service\";\r\nimport {ImgMaxSizeService} from \"./img-max-size.service\";\r\nimport {ImgMaxPXSizeService} from \"./img-maxpx-size.service\";\r\nimport {ImgExifService} from \"./img-exif.service\";\r\nimport {Ng2PicaService} from './ng2-pica.service';\r\n\r\n@NgModule({\r\n  providers: [\r\n    Ng2PicaService,\r\n    ImgMaxPXSizeService,\r\n    ImgMaxSizeService,\r\n    ImgExifService,\r\n    Ng2ImgMaxService,\r\n    Ng2PicaService\r\n  ]\r\n})\r\nexport class Ng2ImgMaxModule {\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}